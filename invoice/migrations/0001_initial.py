# Generated by Django 5.0.12 on 2025-02-26 11:53

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FileUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('result_file', models.FileField(blank=True, null=True, upload_to='results/')),
            ],
        ),
        migrations.CreateModel(
            name='InvoiceDNRDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=30, verbose_name='Имя файла')),
                ('mouth_of_invoice_receipt', models.IntegerField(verbose_name='Месяц поступления счёта')),
                ('year_of_invoice_receipt', models.IntegerField(verbose_name='Год поступления счёта')),
                ('date_of_reporting_period', models.DateField(verbose_name='Дата отчётного периода')),
                ('invoice_number', models.IntegerField(unique=True, verbose_name='Номер счёта')),
                ('total_amount', models.FloatField(verbose_name='Сумма счёта')),
                ('ext_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='InvoiceErrors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ext_id', models.BigIntegerField(blank=True, null=True)),
                ('attachment_id', models.BigIntegerField(blank=True, null=True)),
                ('error_list', models.CharField(max_length=8000)),
                ('error_text', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'invoice_errors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='InvoiceInvoiceJobSteps',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('step_name', models.CharField(max_length=36)),
                ('step_order', models.IntegerField(unique=True)),
            ],
            options={
                'db_table': 'invoice_invoicejob_steps',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RegisterTerritorial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='Код субъекта')),
                ('name', models.CharField(max_length=127, verbose_name='Название субъекта')),
            ],
        ),
        migrations.CreateModel(
            name='InvoiceAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usl_ok', models.IntegerField(null=True, verbose_name='Условия оказания медицинской помощи')),
                ('row_id', models.CharField(max_length=10, verbose_name='Условия оказания медицинской помощи')),
                ('fio', models.CharField(max_length=255, null=True, verbose_name='Фамилия, Имя и Отчество пациента')),
                ('mocod', models.IntegerField(null=True, verbose_name='№ п/п')),
                ('tip', models.CharField(max_length=50, verbose_name='Единица измерения')),
                ('dr', models.DateField(null=True, verbose_name='Дата рождения пациента')),
                ('enp', models.PositiveBigIntegerField(help_text='Номер полиса обязательного медицинского страхования застрахованного лица', verbose_name='ЕНП')),
                ('subj_n', models.CharField(help_text='Наименование субъекта где выдан полис', max_length=255, verbose_name='Субъект где выдан полис')),
                ('profil_id', models.IntegerField(verbose_name='Код профиля оказания медицинской помощи')),
                ('profil_n', models.CharField(max_length=255, verbose_name='Наименование профиля оказания медицинской помощи')),
                ('spec_id', models.IntegerField(verbose_name='Кода специальности врача')),
                ('spec_n', models.CharField(max_length=255, verbose_name='Наименование специальности врача')),
                ('dz', models.CharField(help_text='МКБ-10', max_length=20, null=True, verbose_name='Кода диагноза')),
                ('date1', models.DateField(verbose_name='Дата начала лечения')),
                ('date2', models.DateField(verbose_name='Дата окончания лечения')),
                ('rslt_id', models.IntegerField(verbose_name='Код результата лечения')),
                ('rslt_n', models.CharField(max_length=127, verbose_name='Результат лечения')),
                ('cnt_usl', models.IntegerField(verbose_name='Объём медицинской помощи')),
                ('tarif', models.FloatField(help_text='Средний норматив финансовых затрат на единицу объема медицинской помощи', verbose_name='Тариф')),
                ('sum_usl', models.FloatField(help_text='Расходы на оказание медицинской помощи', verbose_name='Тариф')),
                ('id_pac', models.IntegerField(null=True)),
                ('pid', models.IntegerField(null=True)),
                ('smo_id', models.CharField(max_length=30, null=True)),
                ('enp_id', models.CharField(max_length=16, null=True)),
                ('w_id', models.IntegerField(null=True)),
                ('oip_id', models.CharField(max_length=12, null=True)),
                ('okato_id', models.CharField(max_length=10, null=True)),
                ('req_id', models.IntegerField(null=True)),
                ('req_result', models.CharField(max_length=255, null=True)),
                ('ext', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoice_att', to='invoice.invoicednrdetails')),
            ],
        ),
        migrations.CreateModel(
            name='InvoiceInvoiceJobs',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=255)),
                ('ready', models.BooleanField()),
                ('ext', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='invoice.invoicednrdetails')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='invoice.invoiceinvoicejobsteps')),
            ],
            options={
                'db_table': 'invoice_invoicejobs',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='invoicednrdetails',
            name='code_fund',
            field=models.ForeignKey(max_length=5, on_delete=django.db.models.deletion.PROTECT, to='invoice.registerterritorial', verbose_name='Код территориального фонда'),
        ),
        migrations.AddConstraint(
            model_name='invoiceattachment',
            constraint=models.UniqueConstraint(fields=('enp', 'dr', 'date1', 'date2'), name='unique_combination'),
        ),
        migrations.AlterUniqueTogether(
            name='invoiceattachment',
            unique_together={('enp', 'dr', 'date1', 'date2')},
        ),
    ]
